service: ${env:SERVERLESS_STACK_NAME_INFRA}

useDotenv: true

provider:
  name: aws
  region: sa-east-1
  stage: ${opt:stage, 'dev'}

custom:
  dynamoDb:
    tableName: ${self:service}-${self:provider.stage}
  cognito:
    userPoolName: ${self:service}-${self:provider.stage}
    userPoolClientName: ${self:service}-${self:provider.stage}-client

resources:
  Resources:
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoDb.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.cognito.userPoolName}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.cognito.userPoolClientName}
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
  Outputs:
    cognitoUserPool:
      Value: !Ref CognitoUserPool
      Export:
        Name: ${self:service}-cognitoUserPool-${self:provider.stage}
    cognitoUserPoolClient:
      Value: !Ref CognitoUserPoolClient
      Export:
        Name: ${self:service}-cognitoUserPoolClient-${self:provider.stage}
