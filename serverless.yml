# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: reenanfs
service: ${env:SERVERLESS_STACK_NAME_MAIN}
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  region: sa-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    TABLE_NAME: ${self:custom.dynamoDb.tableName}
  httpApi:
    cors: true
    authorizers:
      httpApiCognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${cf:${env:SERVERLESS_STACK_NAME_INFRA}-${self:provider.stage}.cognitoUserPool}
        audience:
          - ${cf:${env:SERVERLESS_STACK_NAME_INFRA}-${self:provider.stage}.cognitoUserPoolClient}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoDb.tableName}

custom:
  cognito:
    userPoolName: ${env:SERVERLESS_STACK_NAME_INFRA}-${self:provider.stage}
  dynamoDb:
    tableName: ${env:SERVERLESS_STACK_NAME_INFRA}-${self:provider.stage}

functions:
  # User entity functions
  createUser:
    handler: src/user/handlers/create-user.createUser
    events:
      - cognitoUserPool:
          pool: ${self:custom.cognito.userPoolName}
          trigger: PostConfirmation
          existing: true

  # Group entity functions
  createGroup:
    handler: src/group/handlers/create-group.createGroup
    events:
      - httpApi:
          method: POST
          path: /api/v1/groups
          authorizer:
            name: httpApiCognitoAuthorizer

  # UserGroupMembership entity functions
  createUserGroupMembership:
    handler: src/user-group-membership/handlers/create-user-group-membership.createUserGroupMembership
    events:
      - httpApi:
          method: POST
          path: /api/v1/user-group-memberships
          authorizer:
            name: httpApiCognitoAuthorizer

  # Expense entity functions
  createExpense:
    handler: src/expense/handlers/create-expense.createExpense
    events:
      - httpApi:
          method: POST
          path: /api/v1/expenses
          authorizer:
            name: httpApiCognitoAuthorizer

  # ExpenseSplit entity functions
  createExpenseSplit:
    handler: src/expense-split/handlers/create-expense-split.createExpenseSplit
    events:
      - httpApi:
          method: POST
          path: /api/v1/expense-splits
          authorizer:
            name: httpApiCognitoAuthorizer

  # Payment entity functions
  createPayment:
    handler: src/payment/handlers/create-payment.createPayment
    events:
      - httpApi:
          method: POST
          path: /api/v1/payments
          authorizer:
            name: httpApiCognitoAuthorizer

  # Balance entity functions
  createBalance:
    handler: src/user/handlers/create-balance.createBalance
    events:
      - httpApi:
          method: POST
          path: /api/v1/balances
          authorizer:
            name: httpApiCognitoAuthorizer
