# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: reenanfs
service: splitfair

provider:
  name: aws
  runtime: nodejs20.x
  region: sa-east-1
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoDb.tableName}
  environment:
    TABLE_NAME: ${self:custom.dynamoDb.tableName}

custom:
  dynamoDb:
    tableName: ${self:service}-${self:provider.stage}

functions:
  # User entity functions
  createUser:
    handler: src/user/handlers/create-user.createUser
    events:
      - httpApi:
          method: POST
          path: /api/v1/users

  # Group entity functions
  createGroup:
    handler: src/group/handlers/create-group.createGroup
    events:
      - httpApi:
          method: POST
          path: /api/v1/groups

  # UserGroupMembership entity functions
  createUserGroupMembership:
    handler: src/user-group-membership/handlers/create-user-group-membership.createUserGroupMembership
    events:
      - httpApi:
          method: POST
          path: /api/v1/user-group-memberships

  # Expense entity functions
  createExpense:
    handler: src/expense/handlers/create-expense.createExpense
    events:
      - httpApi:
          method: POST
          path: /api/v1/expenses

  # ExpenseSplit entity functions
  createExpenseSplit:
    handler: src/expense-split/handlers/create-expense-split.createExpenseSplit
    events:
      - httpApi:
          method: POST
          path: /api/v1/expense-splits

  # Payment entity functions
  createPayment:
    handler: src/payment/handlers/create-payment.createPayment
    events:
      - httpApi:
          method: POST
          path: /api/v1/payments

  # Balance entity functions
  createBalance:
    handler: src/user/handlers/create-balance.createBalance
    events:
      - httpApi:
          method: POST
          path: /api/v1/balances

resources:
  Resources:
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoDb.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
